name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Clone frappe_docker repository
      run: |
        git clone --depth 1 https://github.com/frappe/frappe_docker.git

    - name: Create apps.json with jemmia-diamond repositories
      run: |
        cat > ./frappe_docker/apps.json << 'EOF'
        [
          {
            "url": "https://github.com/jemmia-diamond/erpnext.git",
            "branch": "version-15"
          }
        ]
        EOF
        export APPS_JSON_BASE64=$(base64 -w 0 ./frappe_docker/apps.json)
        echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./frappe_docker
        file: ./frappe_docker/images/custom/Containerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/jemmia_erp:latest
          ghcr.io/${{ github.repository_owner }}/jemmia_erp:${{ github.sha }}
        build-args: |
          FRAPPE_PATH=https://github.com/jemmia-diamond/frappe.git
          FRAPPE_BRANCH=version-15
          PYTHON_VERSION=3.13.2
          NODE_VERSION=18.20.2
          APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
        cache-from: |
          type=gha
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/jemmia_erp:cache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/jemmia_erp:cache,mode=max
        platforms: linux/amd64

    - name: Send POST request to webhook
      env:
        DEPLOY_HOOK_URL: ${{ secrets.DEPLOY_HOOK_URL }}
        COMMIT_SHA: ${{ github.sha }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        echo "Triggering Dokploy deployment..."
        jq -n --arg ref "refs/heads/main" --arg id "$COMMIT_SHA" --arg message "$COMMIT_MESSAGE" \
          '{ref:$ref, head_commit:{id:$id, message:$message}}' \
          | curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: push" \
              --data @- \
              "$DEPLOY_HOOK_URL"
      continue-on-error: true
