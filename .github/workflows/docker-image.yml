name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Encode apps.json to base64
      run: |
        export APPS_JSON_BASE64=$(base64 -w 0 deployment/apps.json)
        echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

    - name: Clone frappe_docker repository
      run: |
        git clone --depth 1 https://github.com/frappe/frappe_docker.git

    # ADD THIS: Create custom Containerfile with bench build
    - name: Create Containerfile with asset building
      run: |
        cat > ./frappe_docker/images/custom/Containerfile.custom << 'EOF'
        ARG PYTHON_VERSION=3.11.6
        ARG DEBIAN_BASE=bookworm
        FROM python:${PYTHON_VERSION}-slim-${DEBIAN_BASE} AS base

        COPY resources/nginx-template.conf /templates/nginx/frappe.conf.template
        COPY resources/nginx-entrypoint.sh /usr/local/bin/nginx-entrypoint.sh

        ARG WKHTMLTOPDF_VERSION=0.12.6.1-3
        ARG WKHTMLTOPDF_DISTRO=bookworm
        ARG NODE_VERSION=18.18.2
        ENV NVM_DIR=/home/frappe/.nvm
        ENV PATH=${NVM_DIR}/versions/node/v${NODE_VERSION}/bin/:${PATH}

        RUN useradd -ms /bin/bash frappe \
            && apt-get update \
            && apt-get install --no-install-recommends -y \
            curl git vim nginx gettext-base file \
            libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0 libpangocairo-1.0-0 \
            restic gpg mariadb-client less libpq-dev postgresql-client \
            wait-for-it jq \
            && mkdir -p ${NVM_DIR} \
            && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash \
            && . ${NVM_DIR}/nvm.sh \
            && nvm install ${NODE_VERSION} \
            && nvm use v${NODE_VERSION} \
            && npm install -g yarn \
            && nvm alias default v${NODE_VERSION} \
            && rm -rf ${NVM_DIR}/.cache \
            && echo 'export NVM_DIR="/home/frappe/.nvm"' >>/home/frappe/.bashrc \
            && echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >>/home/frappe/.bashrc \
            && if [ "$(uname -m)" = "aarch64" ]; then export ARCH=arm64; fi \
            && if [ "$(uname -m)" = "x86_64" ]; then export ARCH=amd64; fi \
            && downloaded_file=wkhtmltox_${WKHTMLTOPDF_VERSION}.${WKHTMLTOPDF_DISTRO}_${ARCH}.deb \
            && curl -sLO https://github.com/wkhtmltopdf/packaging/releases/download/$WKHTMLTOPDF_VERSION/$downloaded_file \
            && apt-get install -y ./$downloaded_file \
            && rm $downloaded_file \
            && rm -rf /var/lib/apt/lists/* \
            && rm -fr /etc/nginx/sites-enabled/default \
            && pip3 install frappe-bench \
            && sed -i '/user www-data/d' /etc/nginx/nginx.conf \
            && ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log \
            && touch /run/nginx.pid \
            && chown -R frappe:frappe /etc/nginx/conf.d \
            && chown -R frappe:frappe /etc/nginx/nginx.conf \
            && chown -R frappe:frappe /var/log/nginx \
            && chown -R frappe:frappe /var/lib/nginx \
            && chown -R frappe:frappe /run/nginx.pid \
            && chmod 755 /usr/local/bin/nginx-entrypoint.sh \
            && chmod 644 /templates/nginx/frappe.conf.template

        FROM base AS builder

        RUN apt-get update \
            && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
            wget libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev \
            libpq-dev libffi-dev liblcms2-dev libldap2-dev libmariadb-dev libsasl2-dev \
            libtiff5-dev libwebp-dev pkg-config redis-tools rlwrap tk8.6-dev cron \
            gcc build-essential libbz2-dev \
            && rm -rf /var/lib/apt/lists/*

        ARG APPS_JSON_BASE64
        RUN if [ -n "${APPS_JSON_BASE64}" ]; then \
            mkdir /opt/frappe && echo "${APPS_JSON_BASE64}" | base64 -d > /opt/frappe/apps.json; \
          fi

        USER frappe

        ARG FRAPPE_BRANCH=version-15
        ARG FRAPPE_PATH=https://github.com/frappe/frappe
        RUN export APP_INSTALL_ARGS="" && \
          if [ -n "${APPS_JSON_BASE64}" ]; then \
            export APP_INSTALL_ARGS="--apps_path=/opt/frappe/apps.json"; \
          fi && \
          bench init ${APP_INSTALL_ARGS} \
            --frappe-branch=${FRAPPE_BRANCH} \
            --frappe-path=${FRAPPE_PATH} \
            --no-procfile \
            --no-backups \
            --skip-redis-config-generation \
            --verbose \
            /home/frappe/frappe-bench && \
          cd /home/frappe/frappe-bench && \
          echo "{}" > sites/common_site_config.json && \
          find apps -mindepth 1 -path "*/.git" | xargs rm -fr

        # CRITICAL: Build production assets
        RUN cd /home/frappe/frappe-bench && \
          echo "Building production assets..." && \
          bench build --production --verbose && \
          echo "Assets built successfully" && \
          ls -la sites/assets/

        FROM base AS backend

        USER frappe

        COPY --from=builder --chown=frappe:frappe /home/frappe/frappe-bench /home/frappe/frappe-bench

        WORKDIR /home/frappe/frappe-bench

        VOLUME [ \
          "/home/frappe/frappe-bench/sites", \
          "/home/frappe/frappe-bench/logs" \
        ]

        CMD [ \
          "/home/frappe/frappe-bench/env/bin/gunicorn", \
          "--chdir=/home/frappe/frappe-bench/sites", \
          "--bind=0.0.0.0:8000", \
          "--threads=4", \
          "--workers=2", \
          "--worker-class=gthread", \
          "--worker-tmp-dir=/dev/shm", \
          "--timeout=120", \
          "--preload", \
          "frappe.app:application" \
        ]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./frappe_docker
        file: ./frappe_docker/images/custom/Containerfile.custom
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/jemmia_erp:latest
          ghcr.io/${{ github.repository_owner }}/jemmia_erp:${{ github.sha }}
        build-args: |
          FRAPPE_PATH=https://github.com/jemmia-diamond/frappe.git
          FRAPPE_BRANCH=version-15
          PYTHON_VERSION=3.11.6
          NODE_VERSION=18.18.2
          APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
        cache-from: |
          type=gha
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/jemmia_erp:cache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=ghcr.io/${{ github.repository_owner }}/jemmia_erp:cache,mode=max
        platforms: linux/amd64

    - name: Send POST request to webhook
      run: |
        echo "Triggering Dokploy deployment..."
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: push" \
          -d '{
            "ref": "refs/heads/main",
            "head_commit": {
              "id": "${{ github.sha }}",
              "message": "${{ github.event.head_commit.message }}"
            }
          }' \
          "${{ secrets.DEPLOY_HOOK_URL }}"
      continue-on-error: true
